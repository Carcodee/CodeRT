#version 460
#extension GL_EXT_ray_tracing : require 

#include "../UtilsShaders/ShadersUtility.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
} cam;

struct RayPayload{
    vec3 color;
    float distance;
    vec3 normal;
    vec3 tangent;
    vec3 origin;
    float roughness;
    float reflectivity;
    float directLightIntensity;
    bool shadow;
};

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

layout (constant_id = 0) const int MAX_RECURSION = 0;

void main() 
{

	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0);
    uint rayFlags = gl_RayFlagsOpaqueEXT;
    rayPayload.origin= origin.xyz;
	rayPayload.directLightIntensity = 0.0f;
    rayPayload.shadow = false;
	float tmin = 0.001;
	float tmax = 10000.0;
    
    vec3 color = vec3(0.0f);
    vec3 baseCol= vec3(0.0f);
    float dirLightIntensity = 0.0f;
    vec3 throughput = vec3(1.0f);
    
	for (int i = 0; i < MAX_RECURSION; i++) {
	    
        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
		vec3 hitColor = rayPayload.color;
	    if(rayPayload.shadow && i==0){
            throughput*= 0.3f;
	    }
		if (rayPayload.distance < 0.0f) {
			throughput=throughput * hitColor/MAX_RECURSION;
			color = throughput;
			break;
		}else{ 
            const vec4 hitPos = origin + direction * rayPayload.distance;
            origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
            rayPayload.origin=hitPos.xyz;
            vec3 reflectedDir= reflect(direction.xyz, rayPayload.normal);
            vec3 randomDir= randomCosineWeightedDirection(rayPayload.normal,rayPayload.tangent, d.x, d.y);
            //if(rand(d.x,d.y)> rayPayload.reflectivity){
            //    direction.xyz = reflectedDir;
           // }
           direction.xyz = GetReflection(reflectedDir, randomDir, rayPayload.roughness);
           
           throughput = throughput * hitColor/MAX_RECURSION;
		}

	}
    
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0f));


}
