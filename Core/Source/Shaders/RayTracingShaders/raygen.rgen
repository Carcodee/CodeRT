#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout :enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "../UtilsShaders/ShadersUtility.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
} cam;


layout(location = 0) rayPayloadEXT RayPayload rayPayload;

layout (constant_id = 0) const int MAX_RECURSION = 0;

layout(binding=6) uniform light{
    vec3 pos;
    vec3 col;
    float intensity;
}myLight;

layout(set = 0, binding = 10, rgba8) uniform image2D emissiveImage;
layout(set = 0, binding = 13, rgba8) uniform image2D AOImage;


layout(push_constant) uniform pushConstantVariables{
    uint currentFrame;
    int minBounceForIndirect;
    float rayTerminationBias;
    float maxVariance;
    float environmentMapIntensity;
    float AOIntensity;
    float AOSize;
} pc;

#define SAMPLE_COUNT 1 
#define LIGHT_SOURCES 1 

Material currentMaterial;

void main() 
{

    vec3 result = vec3(0.0f);
    vec3 AOResult = vec3(0.0f);
    for (uint sampleIndex = 0; sampleIndex < SAMPLE_COUNT; sampleIndex++) {
    
        uvec2 seed = GetSeed(gl_LaunchIDEXT.xy, sampleIndex, pc.currentFrame);   
        
        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
        const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
        vec2 d = inUV * 2.0 - 1.0;
        vec4 origin = cam.viewInverse * vec4(0,0,0,1);
        vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
        vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0);
        uint rayFlags = gl_RayFlagsOpaqueEXT;
        float tmin = 0.01;
        float tmax = 1000.0;
        
        rayPayload.color = vec3(0.0f);    
        rayPayload.colorLit = vec3(0.0f);    
        rayPayload.origin= origin.xyz;
        rayPayload.shadow = false;
        rayPayload.emissionColor = vec3(0.0f);
        rayPayload.isMiss = false;
        rayPayload.direction = direction.xyz;
        rayPayload.sampleDir = direction.xyz;
        rayPayload.tangent = vec3(0.0f);
        rayPayload.hitT = 0.0f;
        rayPayload.frameSeed = seed;
        vec3 rayThroughput = vec3(1.0f);
        vec3 irradiance = vec3(0.0f);
        float rayPdf = 1.0f;
        bool sampleShadowed = false;
        float aoSample = 1.0f;
    
        for (int i = 0; i < MAX_RECURSION; i++) {
            
            traceRayEXT(topLevelAS, 0, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
            vec3 directLightContrib = rayPayload.color;
            if(rayPayload.isMiss){
                irradiance += (directLightContrib * pc.environmentMapIntensity) * rayThroughput / rayPdf; 
                if(sampleShadowed){
                    //irradiance *= 0.7f;   
                }
                break;
            }
            if(rayPayload.hitT <= pc.AOSize && i == 1 && !rayPayload.isMiss){
                aoSample = (rayPayload.hitT/pc.AOSize)+MaxComponent(directLightContrib);
                aoSample = min(1.0f, aoSample);
            }
            
            irradiance += rayPayload.emissionColor * rayThroughput/ rayPdf; 
            if(i==0){
                imageStore(emissiveImage, ivec2(gl_LaunchIDEXT.xy), vec4(rayPayload.emissionColor, 1.0f));
            }
            
            if(rayPayload.shadow && i==0){
                sampleShadowed = true;
            }
            
            const vec4 hitPos = origin + direction * rayPayload.distance;
            origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
            vec3 reflectedDir= reflect(direction.xyz, rayPayload.normal);
            vec2 vec2Rand= NextVec2(seed);
            vec3 randomDir =  CosineSampleHemisphere(vec2Rand);
            vec3 sampledDir =randomDir;
            if(rayPayload.tangent == vec3(0.0f)){
            }else{
                sampledDir = TangentToWorldWithTangent(randomDir, rayPayload.normal, rayPayload.tangent);
            }
            sampledDir = TangentToWorld(randomDir,rayPayload.normal);
            direction.xyz = GetReflection(reflectedDir, sampledDir, rayPayload.roughness);
            //rayPayload.direction = direction.xyz;
            if(NextFloat(seed) < rayPayload.reflectivity){
                    direction.xyz = reflectedDir;
            }
           
            direction.xyz = rayPayload.sampleDir;
            float lightPdf = 1/LIGHT_SOURCES; 
            rayPdf = 1 * MAX_RECURSION;  
            irradiance += directLightContrib * rayThroughput; 
            rayThroughput *= rayPayload.colorLit; 
            
            if(i >= pc.minBounceForIndirect){
                float threshold = max(0.05f,1.0f-MaxComponent(rayThroughput));
                if(threshold > NextFloat(seed) + pc.rayTerminationBias){
                   break; 
                }
                rayThroughput /= 1.0f - threshold;
                rayThroughput = min(vec3(pc.maxVariance), rayThroughput);
            
            }
    //

        }
        
        AOResult += vec3(aoSample);
        result += irradiance; 
    }
    result = result/SAMPLE_COUNT;
    //result = pow(result, vec3(1.0/2.2));
    
    AOResult = AOResult/SAMPLE_COUNT;
    
    if(pc.currentFrame>0){
        vec3 lastAOResult = imageLoad(AOImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
        AOResult = (AOResult + pc.currentFrame * lastAOResult) / (pc.currentFrame + 1.0);
        
        vec3 lastResult = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).rgb;
        result = (result + pc.currentFrame * lastResult) / (pc.currentFrame + 1.0);
    }
   
    imageStore(AOImage, ivec2(gl_LaunchIDEXT.xy), vec4(AOResult, 1.0f));
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(result, 1.0f));
}
