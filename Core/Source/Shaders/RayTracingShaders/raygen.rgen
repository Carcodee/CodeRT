#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout :enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "../UtilsShaders/ShadersUtility.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
} cam;

struct RayPayload{
    vec3 color;
    float distance;
    vec3 normal;
    vec3 tangent;
    vec3 origin;
    float roughness;
    float reflectivity;
    float directLightIntensity;
    bool shadow;
    bool emissive;
};

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

layout (constant_id = 0) const int MAX_RECURSION = 0;

layout(set = 0, binding = 7, std140) buffer Materials {
    MaterialData materials[];
};
layout(set = 0,binding = 11) uniform sampler2D textures[];

layout(set = 0, binding = 10, rgba8) uniform image2D emissiveImage;

layout(push_constant) uniform AccumulatedFrames{
    uint currentFrame;
} pc;

#define SAMPLE_COUNT 5 

Material currentMaterial;

vec4 TryGetTex(int texIndexStart, int texOffset, vec2 uv){
    if (texOffset== -1){
    
        return vec4(1, 1, 1, 1);
    }
    vec4 texture = texture(textures[texOffset],uv);
    return texture;
}

float TryGetFloatFromTex(int texIndexStart, int texOffset, vec2 uv, float intensity){
	if (texOffset== -1){
		return intensity;
	}
	vec4 texture = texture(textures[texOffset],uv);
	return texture.x * intensity;
}

vec3 GetDiffuseColor(int materialIndex){

   vec3 diffuse= materials[materialIndex].diffuseColor;
   return diffuse;
}

Material UnpackMaterial(MaterialData data, Surface surface){
	Material mat;
	
	return mat;
}

void main() 
{

    vec3 result = vec3(0.0f);
    for (uint sampleIndex = 0; sampleIndex < SAMPLE_COUNT; sampleIndex++) {
    
        uvec2 seed = GetSeed(gl_LaunchIDEXT.xy, sampleIndex, pc.currentFrame);   
        
        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
        const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
        vec2 d = inUV * 2.0 - 1.0;
        vec4 origin = cam.viewInverse * vec4(0,0,0,1);
        vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
        vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0);
        uint rayFlags = gl_RayFlagsOpaqueEXT;
        rayPayload.origin= origin.xyz;
        rayPayload.directLightIntensity = 0.0f;
        rayPayload.shadow = false;
        rayPayload.emissive = false;
        float tmin = 0.001;
        float tmax = 10000.0;
        
        vec3 color = vec3(0.0f);
        vec3 baseCol= vec3(0.0f);
        float dirLightIntensity = 0.0f;
        vec3 throughput = vec3(1.0f);
        
    
        for (int i = 0; i < MAX_RECURSION; i++) {
            
            traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
            vec3 hitColor = rayPayload.color;
            if(rayPayload.emissive && i==0){
                color = hitColor;
                imageStore(emissiveImage, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0f));
                break;
            }
            if(rayPayload.shadow && i==0){
                throughput*= 0.3f;
            }
            if(rayPayload.shadow && i==0){
                throughput*= 0.3f;
            }

            if (rayPayload.distance < 0.0f) {
                throughput=throughput * hitColor;
                color = throughput;
                break;
            }else{ 
               const vec4 hitPos = origin + direction * rayPayload.distance;
               origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
               rayPayload.origin=hitPos.xyz;
               vec3 reflectedDir= reflect(direction.xyz, rayPayload.normal);
               vec2 vec2Rand= NextVec2(seed);
               vec3 randomDir =  CosineSampleHemisphere(vec2Rand);
               direction.xyz = GetReflection(reflectedDir, randomDir, rayPayload.roughness);
               throughput = throughput * hitColor;
               
               //if(rand(d.x,d.y)> rayPayload.reflectivity){
               //    direction.xyz = reflectedDir;
               // }
            }

        }
        
        result += color; 
    }
    result = result/SAMPLE_COUNT;
    
    if(pc.currentFrame>0){
        vec3 lastResult = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).rgb;
        result = (result + pc.currentFrame * lastResult) / (pc.currentFrame + 1.0);
    }
   
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(result, 1.0f));
}
